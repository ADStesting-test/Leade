You are an expert of autonomous driving system (ADS) testing. We want to generate one different scenario to challenge the ego vehicle.
An example scenario is shown as follows.
'''
map_name = "san_francisco"; 

car_model = "Lincoln MKZ 2017";
ego_init_position = "lane_1"->7;
ego_init_state = (ego_init_position);
ego_target_position = "lane_10"->71;
ego_target_state = (ego_target_position);
vehicle_type = (car_model);
ego_vehicle = AV(ego_init_state, ego_target_state,vehicle_type);

npc1_type = "Sedan";
npc1_heading = 0 deg related to ego_vehicle;
npc1_init_position = ("lane_1"->32); 
npc1_init_state = (npc1_init_position, npc1_heading,10); 
npc1_waypoints = Waypoint(("lane_1"->32, ,10),("lane_8"->47, ,6),); 
npc1_destination = ("lane_8"->47); 
npc1_destination_state = (npc1_destination); 
npc1=Vehicle(npc1_init_state, npc1_waypoints, npc1_destination, npc1_type); 

npc2_type = "SchoolBus";
npc2_heading = 0 deg related to ego_vehicle;
npc2_init_position = ("lane_1"->33); 
npc2_init_state = (npc2_init_position, npc2_heading,7); 
npc2_waypoints = Waypoint(("lane_1"->33, ,7),("lane_8"->46, ,10),); 
npc2_destination = ("lane_8"->47); 
npc2_destination_state = (npc2_destination); 
npc2=Vehicle(npc2_init_state, npc2_waypoints, npc2_destination, npc2_type); 

time = 9:00; 
weather = {rain:0.8, fog:0.1, wetness:0.7, sunny:0.2, cloudiness:0.0}; 
evn = Environment(time, weather); 

scenario0 = CreateScenario{load(map_name); ego_vehicle; {npc1,npc2,}; {};  {}; evn};
'''
egoVehicle is the autonomous vehicle targeted for testing. It is specified using the keyword AV, followed by three parameters: the initial state (ego_init_state), the target state (ego_target_state), the type of the vehicle (vehicle_type).
npc represents the vehicles not controlled by the autonomous vehicle, specified using the keyword Vehicle, followed by four parameters: the initial state (npc_init_state), the waypoints that it should follow (npc_waypoint), the target state (npc_destination_state), the type of the vehicle (npc_type).
ped represents the pedestrian, specified using the keyword Pedestrian, followed by three parameters: the initial state (ped_init_state), the waypoints that it should follow (ped_waypoint), the target state (ped_destination_state).
The state contains: its position, its heading, and its current speed. When specifying or mutating the state, the position must always be specified, but the heading and speed are optional.
The waypoint is a list of states and specified using the keyword Waypoint.
The position is described by a lane point. An example of lane point is "lane_39"->20, which specifies a point on the lane with ID 39 and the point is 20 meters from the start of the lane.
env specifies the environment using the keyword Environment, which includes time and weather.
The weather includes five parameters: sun, rain, fog, wetness, and snow. Each parameter can be quantified using a real value between[0,1].
There are some constraints:
the lane of egoVehicle's initial state and target state should not be modified;
at least one lane of npc's waypoint should be the same as the lane of egoVehicle's initial state or target state;
at least one lane of ped's waypoint should be the same as the lane of egoVehicle's initial state or target state;
the distance between egoVehicle's initial state and npc's initial state should be less than 20 meters;
the distance between egoVehicle's initial state and ped's initial state should be less than 20 meters;
the distance between egoVehicle's target state and npc's destination state should be less than 20 meters;
the distance between egoVehicle's target state and ped's destination state should be less than 20 meters.
the speed should not be less than zero;
the heading should not be more than 90 deg and not less than 0 degree.
You can add new states into the Waypoint of npc and ped.
the lane ID of npc and ped should be selected from the following values:[0, 1, 2, 3],[4, 5, 6, 7],[8, 9, 10, 11],[12, 13, 14, 15]